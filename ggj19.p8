pico-8 cartridge // http://www.pico-8.com
version 16
__lua__

-- buttons
local left_btn = 0
local right_btn = 1
local up_btn = 2
local down_btn = 3
local a_btn = 4
local b_btn = 5

-- colors
local cl_black = 0
local cl_darkblue = 1
local cl_darkpurple = 2
local cl_darkgreen = 3
local cl_brown = 4
local cl_darkgray = 5
local cl_lightgray = 6
local cl_white = 7
local cl_red = 8
local cl_orange = 9
local cl_yellow = 10
local cl_green = 11
local cl_blue = 12
local cl_indigo = 13
local cl_pink = 14
local cl_peach = 15

local global_state

local sprites = {
}

function draw_flip_sprite(o)
  spr(o.s, o.x * 8, o.y * 8, 1, 1, o.flip_x, o.flip_y)
end

function draw_flip_sprites()
  foreach(sprites, draw_flip_sprite)
end

function player()
 local player = {
  x = 64,
  y = 64,
  vx = 2,
  vy = 2,
  sprite = 41
 }

 function player:update()
  if btn(right_btn) then
   self.x += self.vx
  end
  if btn(left_btn) then
   self.x -= self.vx
  end
  if btn(down_btn) then
   self.y += self.vy
  end
  if btn(up_btn) then
    self.y -= self.vy
  end
 end

 function player:draw()
  spr(player.sprite, player.x, player.y)
 end

 return player
end

function dummycharacter()
 local dummy_character = {
  x = 16,
  y = 16,
  vx = 3,
  vy = 3,
  sprites = {15,31,47,63},
  counter = 0,
  description = "un gatito.",
 }

 function dummy_character:update(state)
  if is_between(state.cursor, self, 8) then
   state.textbox.text = self.description
  end

  local direction = flr(rnd(40))

  if direction == 0 and self.x <= 120 then
   move(self, self.vx, 0)
   self.counter = (self.counter + 1) % 4
  end
  if direction == 1 and self.x >= 8 then
   move(self, -self.vx, 0)
   self.counter = (self.counter + 1) % 4
  end
  if direction == 2 and self.y <= 112 then
   move(self, 0, self.vy)
   self.counter = (self.counter + 1) % 4
  end
  if direction == 3 and self.y >= 0 then
    move(self, 0, -self.vy)
   self.counter = (self.counter + 1) % 4
  end

 end

 function dummy_character:draw()
  spr(self.sprites[self.counter + 1], self.x, self.y)
 end

 return dummy_character
end

function mkmap(cel_x, cel_y, sx, sy, celw, celh, entities)
 local mapa = {
   entities = entities
 }

 function mapa:update(state)
  foreach(self.entities, function(e) e:update(state) end)
 end

 function mapa:draw()
  map(cel_x, cel_y, sx, sy, celw, celh)
  foreach(self.entities, function(e) e:draw() end)
 end

 return mapa
end

function inventory()
 local inventory = {
  x = 40,
  x_end = 88,
  y = 104,
  y_end = 128,
  visible = false,
  slots = {
    inventoryslot(6, 14),
    inventoryslot(7, 14),
    inventoryslot(8, 14),
    inventoryslot(9, 14),
  },
 }

 function inventory:update(state)
  if is_between(state.cursor,self, 48) then
   self.visible = true
   foreach(self.slots, function(slot) slot:update(state.cursor.dragging, state) end)
  else
   self.visible = false
  end
 end

 function inventory:draw()
  if self.visible then
   rectfill(self.x,self.y,self.x_end,self.y_end, cl_yellow)
   foreach(self.slots, function(slot) slot:draw() end)
  end
 end

 return inventory
end

function textbox()
  local box = {
    x = 0,
    y = 80,
    width = 127,
    height = 16,
    text = ""
  }

  function box:update()
    self.text = ""
  end

  function box:draw()
    rect(self.x, self.y, self.x + self.width, self.y + self.height, cl_red)
    color(cl_darkgreen)
    print(self.text, self.x + 4, self.y + 4)
  end

  return box
end

function inventoryslot(x, y)
 local slot = {
  object = nil,
  x = x * 8,
  y = y * 8,
 }

 function slot:update(object, state)
  if object then
    if is_between(self, object, 8) then
     self.object = object
     self.object.inventory = true
     del(state.map.entitites, object)
    elseif self.object == object then
      self.object = nil
      object.inventory = false
      add(state.map.entities, object)
    end
  end
  if self.object then
    self.object:update(state)
  end
 end

 function slot:draw()
  spr(4, self.x, self.y)
  if self.object then
    self.object:draw(true)
  end
 end

 return slot
end

function dummyobject(x, y, description)
 local dummy_object = {
  x = snap(x),
  y = snap(y),
  sprite = 1,
  draggable = false,
  dragged = false,
  inventory = false,
  description = description
 }

 function dummy_object:update(state)
  if is_between(state.cursor, self, 8) then
   self.draggable = true
   state.textbox.text = self.description
  end

  if btn(a_btn) and self.draggable then
   if not(state.cursor.dragging) then
    state.cursor.dragging = self
   end
  else
   if state.cursor.dragging == self then
    state.cursor.dragging = false
   end
  end

  if not(is_between(state.cursor, self, 8)) then
   self.draggable = false
  end
 end

 function dummy_object:draw(from_inventory)
   if not(self.inventory) or from_inventory then
    spr(self.sprite, self.x, self.y)
   end
 end

 return dummy_object
end

function dummy(x, y, sprite, desc, w, h)
  local obj = {
    x = x * 8,
    y = y * 8,
    sprite = sprite,
    description = desc
  }

  function obj:update(state)
    local h = (h or 1) * 8
    local w = (w or 1) * 8
    if is_between(state.cursor, self, w, h) then
     state.textbox.text = self.description
    end
  end

  function obj:draw()
    local w = w or 1.0
    local h = h or 1.0
    spr(self.sprite, self.x, self.y, w, h)
  end

  return obj
end

function cursor()
 local cursor = {
  x = 0,
  y = 0,
  color = cl_blue,
  dragging = nil,
 }

 function cursor:update(state)
  self.x = snap(state.player.x)
  self.y = snap(state.player.y + 8)
  if btn(a_btn) then
   self.color = cl_red
   state.player.sprite = 25
   enter_zone(state, self.x, self.y)
  else
   self.color = cl_blue
   state.player.sprite = 41
  end

  if self.dragging then
   self.dragging.x = self.x
   self.dragging.y = self.y
  end
 end

 function cursor:draw()
  rect(cursor.x, cursor.y, cursor.x + 8, cursor.y + 8, cursor.color)
 end

 return cursor
end

function title_screen()
 local state = {

 }

 function state:update()
 end

 function state:handle_input()
  if btn(a_btn) and btn(b_btn) then
   global_state = main_screen()
  end
 end

 function state:draw()
  cls()
  print("press z + x", 32, 64)
 end

 return state
end

function main_screen()
 local state = {
  player = player(),
  cursor = cursor(),
  inventory = inventory(),
  textbox = textbox(),
  map = bar,
 }

 function state:handle_input()
 end

 function state:update()
  self.player:update()
  self.cursor:update(self)
  self.textbox:update()
  self.map:update(self)
  self.inventory:update(self)
 end

 function state:draw()
  cls() -- clears the screen
  self.map:draw()
  draw_flip_sprites()
  self.inventory:draw()
  self.cursor:draw()
  self.textbox:draw()
  self.player:draw()
 end

 return state
end

function map_pos(x, y)
  return mget(flr(x / 8), flr((y - 1) / 8))
end

function move(object, dir_x, dir_y)
  local next_x = object.x + dir_x
  local next_y = object.y + dir_y
  local map_tile = map_pos(next_x, next_y)
  if not(fget(map_tile, 0)) then
    object.x = next_x
    object.y = next_y
  end
end

function enter_zone(state, x, y)
 local map_tile = map_pos(x, y)
 if (fget(map_tile, 1)) then
  state.map = bar
 elseif (fget(map_tile, 2)) then
  state.map = bakery
 elseif (fget(map_tile, 3)) then
  state.map = library
 elseif (fget(map_tile, 4)) then
  state.map = main_zone
 end
 print(map_tile)
end

function snap(i)
 return flr(i / 8) * 8
end

function draw_grid()

 -- vertical lines
 for i = 0,120,8
 do
  line(i, 0, i, 128, cl_darkgray)
 end

 -- horizontal lines
 for i = 0,120,8
 do
  line( 0, i, 128, i, cl_darkgray)
 end
end

function is_between(obj1, obj2, range, range_y)
 local range_y = range_y or range
 return obj1.x < (obj2.x + range) and
  obj1.x >= obj2.x and
  obj1.y < (obj2.y + range_y) and
  obj1.y >= obj2.y
end

main_zone = mkmap(0, 0, 0, 0, 16, 16, {
  dummycharacter(),
  dummyobject(16, 16, "un mueble.")
})
bar = mkmap(16, 0, 0, 0, 128, 128, {
  dummy(1, 4, 150, "una lampara."),
  dummy(3, 4, 168, "una lampara?"),
  dummy(3, 5, 152, ""),
  dummy(5, 2, 135, "una lampara de cielo."),
  dummy(6, 2, 135, "una lampara de cielo."),
  dummy(9, 2, 135, "una lampara de cielo."),
  dummy(10, 2, 135, "una lampara de cielo."),
  dummy(0, 6, 154, "una rocola.", 1, 3),
  dummy(2, 7, 141, "una osita.", 1, 2), --osito 1
  dummy(3, 7, 137, "otra rocola.", 1, 2),

  -- Bartender
  dummy(9, 6, 139, "el bartender", 1, 2),

  -- MESA
  dummy(4, 7, 14, "", 1, 2), -- Lado izquierdo
  dummy(5, 7, 130, "", 1, 2), -- Mitad
  dummy(6, 7, 130, "", 1, 2), -- Mitad
  dummy(7, 7, 130, "", 1, 2), -- Mitad
  dummy(8, 7, 130, "", 1, 2), -- Mitad
  dummy(9, 7, 130, "", 1, 2), -- Mitad
  dummy(10, 7, 133, "", 1, 2), -- Lado derecho

  -- Mesa2
  dummy(12, 8, 183, ""),
  dummy(13, 8, 46, ""),
  dummy(14, 8, 134, ""), -- piso

  dummy(14, 6, 136, "un tablero de dardos."),

  -- Comensales
  dummy(5, 7, 173, "un osito.", 1, 2), -- osito 2
  dummy(7, 7, 140, "un osito.", 1, 2), -- osito 3
  dummy(8, 7, 172, "un ratoncito.", 1, 2), -- ratoncito
  dummy(13, 7, 174, "un oso.", 1, 2), -- oso
  dummy(15, 7, 142, "una osa.", 1, 2), -- osa

})
bakery = mkmap(16, 23, 0, 16, 128, 128, {})
library = mkmap(16, 48, 0, 16, 128, 128, {})

function _init()
 global_state = title_screen()
end


function _update()
 global_state:handle_input()
 global_state:update()
end

function _draw()
 global_state:draw()
end

__gfx__
004000000000000004444444444444005555555555555555dddddddddddddddd11dddd111111188100000000a9aaaaa99aaaaa9a66777700000000009aaaaaa9
004444440222222004255555242524005111111751111115d666666d77777777dd33335d88888ee80000000096666666666666697776777000000000dddddddd
004446770444444004255555241114005111111151711175daa99aaddfdfdfdf36633663eeeeeeee00000000a66666666666666adddd277700000000dddddddd
004776770456654004255555244444005111111151111115d555555dfdfdfdfd3a933a93eeeeeeee00000000a66666666666666adddd227700000000dddddddd
067777660444444004255555242524005117111151171115dddddddd7777777736633663eee8e88e00000000a66666666666666adddd227700000000dddddddd
067777770420024004255555241114005111117151111115d666666d7777fff733333333e8eaea9e00000000a66666666666666adddd226707777777dddddddd
067666770420024004255555244444005711111151111715daa99aad77179a973439aa93e1eeeeee00000000a66666666666666adddd226701777777dddddddd
067777770420024004255555242524005111111151111115d555555d7717777734366663e1eeeeee000000009666666666666669dddd226701888888dddddddd
067677770077777004211111241114005111111151111115dddddddd111111111111111100fff000111111119666666666666669dddddddd01dd57dddddddddd
067777660777777604444444444444005111111151111115d666666d11111111111111110fffff0015555555a66666666666666adddddddd01dd57dddddddddd
067776774777777604555455542524005111171157111115daa99aaddddddddddddddddd0ffffff011555555a66666666666666adddddddd01dd57dddddddddd
067777774666666d045d545d541114005111111151117115d555555dd555555d5555555505fffff011155656a66666666666666adddddddd01dd57dddddddddd
067666664444444404565456544444005117111151111115dddddddddaa99aad55555555f5fffff011115555a66666666666666adddddddd01dd57dddddddddd
044444444444444404555455545654005111111151111715d666666dd666666d5d555dd5fffffff011111555a66666666666666adddddddd01dd57dddddddddd
042000004200000004444444444444005111117157111115d9a22a9ddaa99a1d51515a950f5f5f00111111119666666666666669dddddddd00dd57dddddddddd
042000004200000004200000000024005555555555555555d552255dd555551d5551555500000000dddddddda9aaaaa99aaaaa9adddddddd000007009aaaaaa9
000dd000dddddddddddddddd66666666666666667777776666666666111111111111111100fff000111111119dddddddddddddd966666666eeeee0009ddddddd
000dd000d66667d6666d6676666677776776666677777776677667766dddddd6111111110fffff0055555555adddddddddddddda66666666eeeeee00addddddd
000dd0006d6d66676dd66d666677777777776666777777667777677755555555dddddddd0ffffff055555555adddddddddddddda6666666666666660addddddd
000660006666dd66766d76666677777777777766777767667777777755a99a55555555550ffffff056565656adddddddddddddda6666666600000560addddddd
00d66d0067d676666d66dd6d6767777777777776777776667777777755511555555555550fffff5f55555555adddddddddddddda6666666600000560addddddd
0d6666d0d66d6d6766d66676677777777777777677777766777777775551155555ddd5550f5f5f0f55555555adddddddddddddda6666666600000560addddddd
069aa96066d6666666676dd667777777777777767777777677777777dddddddd55a9a5150f0f0f0011111111adddddddddddddda6666666600000560addddddd
000aa0006766667d7666667d66777777777777667777776677777777dddddddd555555150f0f0f00dddddddd9dddddddddddddd99aaaaaa9000000609ddddddd
04444444d766766dd666666767777777777777766677777777777777777777771111111166666666111111119dddddddddddddd9dddd22679aaaaaa9ddddddd9
02222222666d6d666d76dd666777777777777776666777777777777777777777111111116766666755555551addddddddddddddadddd227666666666ddddddda
444444447d6666d7666d66766777777777777776666677777777777777777777dddddddd6776767755555511addddddddddddddadddd226766666666ddddddda
45dddd67666d6d667d6666d66677777777777766667777777777777777777777555555557777777765655111addddddddddddddadddd226766666666ddddddda
4444444466d67666d666d66667677777777776766777777777677777777777775a5555557777777755551111addddddddddddddadddd226766666666ddddddda
45dddd67d66d66d666d766d66677777777777766667777777767676777777777595dd5d57777777755511111addddddddddddddadddd227766666666ddddddda
444444446d66d6666d6d666d66766777777667666667777776676677777777775151151577777777111111119dddddddddddddd95555527666666666ddddddda
400000006676667d6666dd7666666666666666666777777766666666777777775155555577777777dddddddda9aaaaa99aaaaa9a6766677666666666ddddddd9
444444443f33f33f44444444444444444444444444444444444444444444444400000000000000000000000000000000003b030000f00f000888880000444400
4000000433f33f3342222222222222242222222240000004428990e09089052400f9999999999000099999999999999008083bb000ffff0000fff88000ffff40
4000000433333333422222222222222422222222400e8804428ff0e0908f062400f999949999900009999999999999903b30b383000f0f000f0f0ff00f0f0ff0
400000043f33f33f422222222222222422222222400ee804428ff0e0908f062400f99944499990000999499999949990038303334fffff0000ffff8000ffff40
4000000433f33f3342222222222222242222222240eeee04428ff0e0908f062400f999949999900009944499994449900bb383b000fffff0008ff880000ff000
4000000433333333422222222222222422222222400e0004444444444444444400f9999999999000099949999994999044444444000ff000099f9990088f8880
400000043f33f33f4222222222222224222222224000000442e080430405092400f999999999900009999999999999900ffffff0f88f888f0f9999f00f8888f0
4000000433f33f3342222222222222242222222240000004429080f309050e2400fffffffffff0000ffffffffffffff004444440f088660f011611f0022522f0
40000004ffffffff42222222222222242222222240000004429080f309050e2400ff999999999990999999999999999944444444f088880ff1161ff0f2252ff0
400000043333333342222222222222242222222240000004429080f309050e24004f999999999990999999999999999949008fe4f088880f0116110002252200
40000004ffffffff4222222222222224222222224088900444444444444444440044444444444440444444444444444449008fe4001111000055550000dddd00
40000004333333334222222222222224222222224089900442222222222222240040004000400400040040000000404049008fe4001001000050050000d00d00
40000004ffffffff4222222222222224222222224099990442000000000000240040004000400400040040000000404044444444001001000050050000d00d00
400000043333333342222222222222242222222240009004420000000000002400000040000004000400000000000040409f0804001001000050050000d00d00
40000004ffffffff42222222222222242222222240000004420000000000002400000040000004000400000000000000409f0804001001000050050000d00d00
400000043333333344444444444444444444444444444444400000000000000400000000000000000000000000000000409f0804055055000110110005505500
00000000000000004222222222222224444444447770777000030b0055000055080000b00800080000000077000fff00444444440044440000eeee0000000000
5500005500000077422222222222222440000004707070700b0830300500005030b03b33888088800770007000fffff04e0f089400ffff4000ffffe000000000
05000050077000774222222222222224400e8804707077700030338005555550333833b0888888800777777000fffff04e0f08940ff0fff00f0f0ff000000000
05555550077777704222222222222224400ee80477707000080b380005755750b83bb38088888880077777700fffffff4e0f089400ffff0000ffff0000000000
0575575007777770422222222222222440eeee040000000000033000055445500333b3300888880000707070ffffffff44444444000ff000000ff00000000000
05544550007070704222222222222224400e00047000777004444440005555000838b380008880000077777000099900422222240eefeee0022f222000000000
00555500007777704222222222222224400000047700707000ffff000005800044444444000800000007070000005000420000240feeeef00f2222f000000000
000580000007070042222222222222244444444477707070004444000555855004444440000000000077877700005000400000040dd5ddf0055655f044444444
05558550077787774444444422222222cccccccc7779777900377730055555504444444044444444077777770000500088888888fdd5dff0055655f000044000
0555555007777777ffffffff22222222cc5555cc79797979003373800555555047777774777777740777777700005000400088880dd5dd00f5565ff000044000
05555550077777772222222222222222c557555c7979777900833330055555504ddddd757ddddd74077777770000500040008888008888000044440000044000
05555550077777772222222222222222c55555cc7779799900033800055555504777777577777774077777770000500066608777008008000040040000044000
55555555777777772222222222222222c55555cc9999999900003000555555554ddddd757dd7dd74777777770000500066668888008008000040040000044000
55555555777777772222222222222222c55555557999777900003000555555554777777577777774777077070000500066608777008008000040040000044000
55055055777077072222222222222222ccccc55c7799797900444440550550554dd7dd747ddddd74777077070000500088888888008008000040040000044000
55055055777077072222222222222222ccccc5cc7779797900044400550550554444444044444444777077070555555500000000055055000880880044444444
55555555111111150000000000000000000000000000000000eeee000050050009333330000000000e6d56e00007007000000000007000700000000751111111
5155555111115111000000000000000000000000000000000eeeeee00050050033888830000000000eeeeee00077777700400400077777700000077751115111
5151551111515111000000000000000000000000000000000deeeed05555555538333383000000000edddde007a777a70444444007a77a70000577a755111111
51515511115151110000000000000000000000000000000006dddd60dddddddd38398383000000000edabde00765576704444444775577700779977755515111
515155111111515100000000000000000000000000000000065005600888888038388383000000000edc8de007777777044a44a4777777700770777755151111
511155111111115177777777777777777777777777777770065005600000000038333983000aa0000edddde00077777009444dd4073777d0077bbbbb55151111
51111511151111517777777777777777777777777777771006500560000000003388883300a99a000eeeeee00c83888ca99434490d33dddd0777b77b51111511
5111151111111111888888888888888888888888888888100600006000000000033933300a9669a00e0000e0cc83388caa933399dd33d77d0077777b51111111
115111555555555575ddd75ddd75ddd775ddd75ddd75dd100888880000500500000330000e65d6e000a666000c7337ccaa4433aadd3377dd00bbbbbb51111111
115511111555555575ddd75ddd75ddd775ddd75ddd75dd100840088000500500083773800eeeeee00aadd990087337c8999344a9dd777ddd0bbbbbbb51111111
115555111151555575ddd75ddd75ddd775ddd75ddd75dd108840008055555555087777800edddde0aadd7d9908888888999999997ddddddd0bbbbbbb51111111
111551111151155175ddd75ddd75ddd775ddd75ddd75dd1084000000dddddddd08a66a800edcade0adda97d90888888809999999755ddd550bbbbbbb51111111
511551151151151175ddd75ddd75ddd775ddd75ddd75dd10840000000eeeeee0087777800ed8bde06dd9add908888880099999400555555500bbbbbb51111111
515151151111111175ddd75ddd75ddd775ddd75ddd75dd108840008000000000087337800edddde06dda9dd6008000800490054400555550000bb77051111111
511151151111115175ddd75ddd75ddd775ddd75ddd75dd000840088000000000083773800eeeeee006da9d607770007704440560007707700000077051111111
5111111511111151700007000070000770000700007000000888880000000000000330000e8008e006da9d600000000006000060007707700007777051111111
55111111111111110077776666666677dddddddddddddddd0eeeee0000500500033333300e6d56e0065a956000070070000000000040040004004000d777777d
55111111111111110777677767667776dddddddddddddddd0e400ee000500500333333330eeeeee0066a96600077777700006060044444400444440072111127
51111111111111117772ddddddddddddddddddddddddddddee4000e055555555399aa9930edddde006d66d6007a777a700066660044a44a40a44a44072111127
51111111111111117722dddddddddddddd3ddd3ddddddddde4000000dddddddd399a89930ed8cde0065dd560076777670d6a66660444dd444444444472551127
55511111111111117722ddddddddddddd333d33d3ddd33dde40000000ffffff0399aa9930edbade0065a95600775577706666666cc44444c44dd444a72555127
55111511111111117622ddddddddddddd333d33d33dd33ddee4000e000000000333333330edddde0066a9660007777700066ffef4ccc44cc044444aa72955527
51111111111111117622dddddddddddd53335335335533550e400ee000000000303333030eeeeee006d66d600c88888c0003feee44ccc3ccaa44aa887255a927
51111111111111117622dddddddddddd76766667677677670eeeee0000000000303003030e8008e0065dd5600c88888c0033feee44cc33ccaaaaa88872555527
51151555222222227622dddddddddddddddddddddddddddd0fffff00000eeeee033333300e65d6e0065a95600c88888c0a66eeaa44cc33c4aaaaaa8872555527
51111551444444446722dddddddddddddddddddddddddddd0f400ff000eeeeee333333330eeeeee0066a96600c88888c0a33aaaa44993444aaaaaa4472a95527
51511551222222227622ddddddddddddddddddddddddddddff4000f006666666399aa9930edddde006d66d6077888877aaaaaaa0999999990aaaa44072555527
51511511444444447622ddddddddd3ddddd3dddddd3dddddf4000000065000003998a9930edb8de0065dd56078888877a6dddd60099999990119944172555527
51551111222222227622ddddd33d33dd33d33d33d333d3d3f400000006500000399aa9930edacde0065a956008888880a6500560065995990111111172dddd27
55551151444444447722ddddd33d33dd33d33d33d333d333ff4000f006500000333333330edddde0665a95660088880006500560065445440110001172dddd27
5555115122222222672555555335335533533533533353330f400ff006500000303333030eeeeee0d666666d0080080006500560065005600440004472111127
5555555544444444677666767767666766676766677666770fffff0006000000303003030e8008e00dddddd00770077006000060060000604440044422111122
__gff__
0101010100000100010000000000000001010101000003010100000000000000000000000000000101000000000000000100000000000001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
160607181716081827160638181709a1160607181716081827160638181709a1160607181716081827160638181709051606071817160818271606381817090500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1a2a2a2a2a2a2a2a2a2a2a2a2a2a2a3a1a2a2a2a2a2a2a2a2a2a2a2a2a2a2a3a1a2a2a2a2a2a2a2a2a2a2a2a2a2a2a3a1a2a2a2a2a2a2a2a2a2a2a2a2a2a2a3a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2326262626262626262626262626262480a191a191a1a191a1a1a191a191a1a1040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
353737373737373737373737373737259fa1a1a1a1a1a1a1a1a1a1a1a1a1a1a1040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
353737373737373737373737373737258fa181a1a1a2a3a3a3a3a30da19090a1040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
35373737373737373737373737373725a0a190a1a1b2b4b4b5b4b53da1a181a1040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
353737373737373737373737373737259fafa180a1b2b5b5b5b5b53da1a1a1a12a2a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
333636363636363636363636363636349fbfa1a1a1b2a4a4a4a4a43da1a1a1a12a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
21222122212221222122212221222222b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
31313231313131313131313131313232b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0b3e3e3e3e3e3e3e3e3e3e3e3e3e3e0c0b3e3e3e3e3e3e3e3e3e3e3e3e3e3e0c0b0d0d0d0d0d0d0d0d0d0d0d0d0d0d0c0b0d0d0d0d0d0d0d0d0d0d0d0d0d0d0c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d1e2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d1e0e2d2d2d2d2d2d2d2d2d2d2d2d2d2d1e0e2d2d2d2d2d2d2d2d2d2d2d2d2d2d1e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1b2d2d2d2d2d2d2d2d2d2d2d2d2d2d1c1b2d2d2d2d2d2d2d2d2d2d2d2d2d2d1c2b1d1d1d1d1d1d1d1d1d1d1d1d1d1d2c2b1d1d1d1d1d1d1d1d1d1d1d1d1d1d2c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2b1d1d1d1d1d1d1d1d1d1d1d1d1d1d2c2b1d1d1d1d1d1d1d1d1d1d1d1d1d1d2c2b1d1d1d1d1d1d1d1d1d1d1d1d1d1d2c2b1d1d1d1d1d1d1d1d1d1d1d1d1d1d2c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2b1d1d1d1d1d1d1d1d1d1d1d1d1d1d2c2b1d1d1d1d1d1d1d1d1d1d1d1d1d1d2c2b1d1d1d1d1d1d1d1d1d1d1d1d1d1d2c2b1d1d1d1d1d1d1d1d1d1d1d1d1d1d2c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3b1f1f1f1f1f1f1f1f1f1f1f1f1f1f3c3b3d3d3d3d3d3d3d3d3d3d3d3d3d3d3c3b3d3d3d3d3d3d3d3d3d3d3d3d3d3d3c3b3d3d3d3d3d3d3d3d3d3d3d3d3d3d3c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100002205017050170501305014050170501905010050100501105019050130500e6501e05014050270501f460140701e0701d07023070150701d0701d07020070180701b070240501a0401c0501b0501b050
